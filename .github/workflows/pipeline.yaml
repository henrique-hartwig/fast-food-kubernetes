name: CI/CD Pipeline

on:
  push:
    branches:
      - '*'
      - 'develop'
      - 'master'
  pull_request:
    branches:
      - master
      - develop

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  code-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install
        
      - name: Run ESLint
        run: bun run lint

  tests:
    needs: code-analysis
    runs-on: ubuntu-latest
    services:
      postgres_test:
        image: postgres:latest
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5454:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install
        
      - name: Run unit tests
        run: bun test:unit

      - name: Setup test database
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5454/test_db?schema=public" > .env.test
          bun run generate
          bun run test:integration:migrate
        
      - name: Run integration tests
        run: bun run test:integration:run

  build-and-push:
    if: github.event_name == 'pull_request' && (github.base_ref == 'develop' || github.base_ref == 'master')
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  version-and-deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: tests
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Generate version based on branch
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            bun run release:minor
          elif [[ "${{ github.ref }}" =~ ^refs/heads/hotfix/ ]]; then
            bun run release:patch
          fi
          git push --follow-tags

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push production image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          VERSION=$(node -p "require('./package.json').version")
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
